{"version":3,"sources":["model/worker.ts","components/BlurContainer.tsx","components/SquareButton.tsx","svg/check.svg","svg/no-check.svg","components/camera/SourceSelectorItem.tsx","svg/gear.svg","components/camera/SourceSelector.tsx","components/camera/Camera.tsx","components/prediction/PredictionEntry.tsx","components/prediction/Prediction.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["addMethods","methods","module","exports","w","Worker","name","BlurContainer","additionalClassname","children","className","SquareButton","onClick","setHover","undefined","onMouseEnter","onMouseLeave","SourceSelectorItem","selected","onSelect","src","check","noCheck","alt","SourceSelector","devices","deviceId","setDeviceId","imageFlip","setImageFlip","selectorVisible","setSelectorVisible","useState","hovering","id","e","stopPropagation","gear","map","device","key","label","Camera","predictCanvas","predictions","setDevices","webcamRef","useRef","handleDevices","useCallback","mediaDevices","videoDevices","filter","kind","length","useEffect","navigator","enumerateDevices","then","getCanvas","a","current","newImage","sleep","ms","Promise","resolve","reject","setTimeout","canvas","currentCanvas","ref","screenshotFormat","forceScreenshotSourceSize","screenshotQuality","audio","videoConstraints","mirrored","PredictionEntry","confidence","top","style","width","toString","Prediction","sortedPredictions","Object","entries","sort","b","slice","idx","modelWorker","ModelWorker","loadModel","process","App","setPredictions","ctx","getContext","imageData","getImageData","height","predict","results","Confidences","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a9bcec0.chunk.js","sourcesContent":["\n\t\t\t\tvar addMethods = require(\"../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"loadModel\",\"disposeModel\",\"predict\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"b7c23e5e2735ef8c4e33.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","import React, {FunctionComponent} from \"react\";\nimport './BlurContainer.css';\n\ntype BlurContainerType = {\n    additionalClassname?: string\n}\n\nconst BlurContainer: FunctionComponent<BlurContainerType> = ({ additionalClassname, children }) => {\n    // simple container with rounded corners and a blurred translucent background\n    let className = \"blur-container\";\n    if (!!additionalClassname) {\n        className = className + ` ${additionalClassname}`;\n    }\n    return (\n        <div className={className}>\n            { children }\n        </div>\n    );\n}\n\nexport default BlurContainer;\n","import React, {FunctionComponent} from \"react\";\nimport BlurContainer from \"./BlurContainer\";\nimport \"./SquareButton.css\";\n\ntype SquareButtonProps = {\n    onClick?: () => void,\n    setHover?: (hovering: boolean) => void\n};\n\nconst SquareButton: FunctionComponent<SquareButtonProps> = ({ onClick, setHover, children }) => {\n    // Square button that is inside the blur container\n    return (\n        <div\n            onClick={onClick ? () => onClick() : undefined}\n            onMouseEnter={setHover ? () => setHover(true) : undefined}\n            onMouseLeave={setHover ? () => setHover(false) : undefined}\n        >\n            <BlurContainer additionalClassname=\"square-button\">\n                { children }\n            </BlurContainer>\n        </div>\n\n    );\n}\n\nexport default SquareButton;\n","export default __webpack_public_path__ + \"static/media/check.06c31cf8.svg\";","export default __webpack_public_path__ + \"static/media/no-check.fe894ae6.svg\";","import React from \"react\";\nimport check from \"../../svg/check.svg\";\nimport noCheck from \"../../svg/no-check.svg\";\n\nimport \"./SourceSelectorItem.css\";\n\n\ntype SourceSelectorItemProps = {\n    name: string,\n    selected: boolean,\n    onSelect: () => void\n}\n\n// Component for selecting the webcam source and flipping the image horizontally\nfunction SourceSelectorItem({selected, onSelect, name}: SourceSelectorItemProps) {\n\n    return (\n        <div key={name} className=\"source-item-container\" >\n            <div className={`source-device${(selected) ? \" source-selected\" : \"\"}`}>\n                {name}\n            </div>\n            <div onClick={() => onSelect()} className=\"source-radio-button\">\n                <img src={selected ? check : noCheck} alt={'Select device'} />\n            </div>\n        </div>\n    )\n}\n\nexport default SourceSelectorItem;\n","export default __webpack_public_path__ + \"static/media/gear.b1f1407e.svg\";","import React, {useState} from \"react\";\nimport SquareButton from \"../SquareButton\";\nimport BlurContainer from \"../BlurContainer\";\nimport SourceSelectorItem from \"./SourceSelectorItem\";\nimport gear from \"../../svg/gear.svg\";\n\nimport \"./SourceSelector.css\";\nimport check from \"../../svg/check.svg\";\nimport noCheck from \"../../svg/no-check.svg\";\n\n\ntype SourceSelectorProps = {\n    devices: MediaDeviceInfo[]\n    deviceId?: string,\n    setDeviceId: (deviceId: string) => void,\n    imageFlip: boolean,\n    setImageFlip: (imageFlip: boolean) => void,\n    selectorVisible: boolean,\n    setSelectorVisible: (visible: boolean) => void\n}\n\n// Component for selecting the webcam source and flipping the image horizontally\nfunction SourceSelector({devices, deviceId, setDeviceId, imageFlip, setImageFlip, selectorVisible, setSelectorVisible}: SourceSelectorProps) {\n    const [hovering, setHover] = useState(false);\n\n    return (\n        <div\n            id=\"camera-select-button\"\n            onClick={(e) => e.stopPropagation()}\n            onMouseLeave={() => {setSelectorVisible(false)}}\n        >\n            <SquareButton setHover={(hovering) => {setHover(hovering); if (hovering) setSelectorVisible(true);}}>\n                <img id=\"gear-icon\" src={gear} alt={\"Gear Icon\"} className={selectorVisible || hovering ? \"gear-rotated\" : undefined} />\n            </SquareButton>\n            <BlurContainer additionalClassname={`source-selector${selectorVisible ? \" source-expanded\" : \"\"}`}>\n                {devices.map((device, key) => (\n                    <SourceSelectorItem\n                        name={device.label || `Device ${key + 1}`}\n                        onSelect={() => setDeviceId(device.deviceId)}\n                        selected={device.deviceId === deviceId}\n                        key={device.deviceId}\n                    />\n                ))}\n                <div className=\"toggle-container\">\n                    <div className=\"toggle-item-container\">\n                        <div className={`toggle-item source-device${(imageFlip) ? \" source-selected\" : \"\"}`}>\n                            {\"Flip Image\"}\n                        </div>\n                        <div onClick={() => setImageFlip(!imageFlip)} className=\"toggle-radio-button\">\n                            <img src={imageFlip ? check : noCheck} alt={'Flip Webcam Button'} />\n                        </div>\n                    </div>\n                </div>\n            </BlurContainer>\n        </div>\n    )\n}\n\nexport default SourceSelector;\n","import React, {useEffect, useState, useRef, useCallback} from \"react\";\nimport Webcam from \"react-webcam\";\nimport SourceSelector from \"./SourceSelector\";\nimport \"./Camera.css\";\n\ntype CameraProps = {\n    predictCanvas: (canvas: HTMLCanvasElement) => void,\n    predictions?: { [label: string]: number };\n}\n\n// Our webcam display and capture component\nfunction Camera({ predictCanvas, predictions }: CameraProps) {\n    const [devices, setDevices] = useState<MediaDeviceInfo[]>([]);\n    const [deviceId, setDeviceId] = useState<string | undefined>(undefined);\n    const [imageFlip, setImageFlip] = useState(true);\n    const webcamRef = useRef<Webcam>(null);\n    const [selectorVisible, setSelectorVisible] = useState(false);\n\n    // handle any webcam plugged into the computer\n    // https://github.com/mozmorris/react-webcam#show-all-cameras-by-deviceid\n    const handleDevices = useCallback(\n        (mediaDevices) => {\n            // find all the webcams\n            const videoDevices = mediaDevices.filter(({kind}: MediaDeviceInfo) => kind === \"videoinput\");\n            setDevices(videoDevices);\n            // set our initial webcam to be the first in the list\n            if (videoDevices.length > 0) {\n                setDeviceId(videoDevices[0].deviceId);\n            }\n        },[setDevices, setDeviceId]\n    );\n    useEffect(() => {\n        navigator.mediaDevices.enumerateDevices().then(handleDevices);\n    }, [handleDevices]);\n\n    // function to grab the current frame drawn on canvas from the webcam\n    const getCanvas: () => Promise<HTMLCanvasElement | undefined> = useCallback(async () => {\n        let newImage;\n        if (webcamRef.current) {\n            newImage = webcamRef.current.getCanvas();\n            if (newImage) {\n                return newImage;\n            }\n        }\n    }, [webcamRef]);\n\n    // helper for waiting in our loop when the camera is loading (getting the image)\n    const sleep: (ms: number) => Promise<NodeJS.Timeout> = useCallback((ms) => {\n        return new Promise(function (resolve, reject) {\n            setTimeout(resolve, ms);\n        });\n    }, []);\n\n    // while we have the webcam mounted, predict frames as fast as we get new predictions back from the model\n    useEffect(() => {\n        getCanvas().then(async (canvas: HTMLCanvasElement | undefined) => {\n            let currentCanvas = canvas;\n            while (!currentCanvas) {\n                // if no canvas, wait 500ms and try again\n                await sleep(500);\n                currentCanvas = await getCanvas();\n            }\n            if (currentCanvas) {\n                predictCanvas(currentCanvas);\n            }\n        })\n    }, [sleep, predictions, deviceId, getCanvas, predictCanvas])\n\n    return (\n        <div id=\"video-container\" onClick={() => setSelectorVisible(false)}>\n            <SourceSelector\n                devices={devices}\n                deviceId={deviceId}\n                setDeviceId={setDeviceId}\n                imageFlip={imageFlip}\n                setImageFlip={setImageFlip}\n                selectorVisible={selectorVisible}\n                setSelectorVisible={setSelectorVisible}\n            />\n            <Webcam\n                ref={webcamRef}\n                screenshotFormat=\"image/jpeg\"\n                forceScreenshotSourceSize={true}\n                screenshotQuality={1}\n                audio={false}\n                videoConstraints={!!deviceId ? { deviceId } : {}}\n                mirrored={imageFlip}\n            />\n        </div>\n    );\n}\n\nexport default Camera;\n","import React from \"react\";\nimport \"./PredictionEntry.css\";\n\ntype PredictionEntryProps = {\n    label: string\n    confidence?: number\n    top?: boolean\n}\n\nfunction PredictionEntry({label, confidence, top}: PredictionEntryProps) {\n    // render the predicted label and a bar representing the confidence value\n    // make the top confidence value green\n    return (\n        <div key={label} className=\"prediction-entry\">\n            {label}\n            {!!confidence ?\n                <div\n                    className={\"prediction-bar\" + (top ? \" prediction-green\" : \"\")}\n                    style={{width: (confidence*100).toString() + \"%\"}}\n                />\n            : null}\n        </div>\n    );\n};\n\nexport default PredictionEntry;\n","import React from \"react\";\nimport BlurContainer from \"../BlurContainer\";\nimport PredictionEntry from \"./PredictionEntry\";\nimport \"./Prediction.css\";\n\ntype PredictionProps = {\n    predictions?: { [label: string]: number },\n    top?: number\n}\n\nfunction Prediction({predictions, top=3}: PredictionProps) {\n    // display the top N (default 3) predictions returned from the model\n    let sortedPredictions: Array<[string, number]> | undefined;\n    if (!!predictions) {\n        // sort our predictions by the confidence value and take the top N\n        sortedPredictions = Object.entries(predictions)\n            .sort((a, b) => b[1] - a[1])\n            .slice(0, top);\n    }\n    return (\n        <div id=\"predictions\">\n            <BlurContainer>\n                {!!sortedPredictions ?\n                    sortedPredictions.map(([label, confidence], idx) => (\n                        <PredictionEntry key={label} label={label} confidence={confidence} top={idx===0} />\n                    ))\n                    : <PredictionEntry label={'Loading...'} />\n                }\n            </BlurContainer>\n        </div>\n    );\n}\n\nexport default Prediction;\n","import React, {useCallback, useState} from 'react';\nimport Camera from './camera/Camera';\nimport Prediction from './prediction/Prediction';\n// @ts-ignore\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport ModelWorker from \"workerize-loader!../model/worker\";\n\n// create our web worker instance for running the tfjs model without blocking the UI thread\nconst modelWorker = ModelWorker();\n// the filepaths to our exported signature.json and model.json files (in the public/model folder)\nconst signatureFile = process.env.PUBLIC_URL + `/model/signature.json`;\nconst modelFile = process.env.PUBLIC_URL + `/model/model.json`;\n// load our model in the web worker\nmodelWorker.loadModel(signatureFile, modelFile);\n\n\nfunction App() {\n    // state for keeping track of our predictions -- map of {label: confidence} from running the model on an image\n    const [predictions, setPredictions] = useState<{[key: string]: number} | undefined>(undefined);\n\n    // function to run the image from an html canvas element through our model\n    const predictCanvas = useCallback((canvas: HTMLCanvasElement) => {\n        // get the canvas context\n        const ctx = canvas.getContext('2d');\n        if (ctx) {\n            // get the pixel data from the full canvas\n            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n            // run the async predict function and set the values to our state\n            modelWorker.predict(imageData).then((results: {Confidences: {[label: string]: number}}) => {\n                if (results) {\n                    setPredictions(results.Confidences);\n                }\n            });\n        }\n    }, []);\n\n    return (\n        <div>\n            <Camera predictCanvas={predictCanvas} predictions={predictions}/>\n            <Prediction predictions={predictions}/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}